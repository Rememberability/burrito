Example installation of Burrito on Fedora 14 (32-bit) within VirtualBox
2012-01-26

1. Download Fedora 14 32-bit ISO

http://mirror.seas.harvard.edu/fedora/linux/releases/14/Live/i686/Fedora-14-i686-Live-Desktop.iso


2. Do a normal installation of Fedora 14 in VirtualBox (v4.1.4 r74291)

Set up a new VM named "Burrito (Fedora 14)" with 2GB of RAM, 40GB hard
drive (VDI dynamically-sized format)

- root password: passwd
- user: researcher
  password: passwd

During installation, do custom hard disk partitioning to shrink the
'lv_root' LVM logical volume (pseudo-partition) to 10 GB and create a new
'lv_home' LVM logical volume mounted in '/home' (~26GB).

  (Since there is no option to format 'lv_home' as NILFS, just format it
  as ext4 for now ... we'll reformat later.)

Finish installation, eject the Fedora 14 LiveCD ISO image, and reboot.


3. Initial setup:

Do 'su' and then 'visudo' to add user 'researcher' to sudoers

Disable stupid pesky SELinux permanently by editing '/etc/selinux/config' and setting:

  SELINUX=disabled


4. Reformatting /home as NILFS

Backup /home/researcher before reformatting /home into NILFS

  sudo mkdir /home-backup
  sudo rsync -avh /home/researcher /home-backup/

Install nilfs tools before attempting anything else:

  sudo yum install nilfs-utils


Insert the Fedora 14 LiveCD into the VirtualBox virtual CD drive and
then reboot to start a "Live System User" session from the CD-ROM.

  - Using the LiveCD session makes it possible to run commands to muck
    with filesystem-related stuff since the filesystems aren't mounted

Do 'su' in the terminal to change to the root user (no password needed!)

Install nilfs tools for LiveCD session:

  yum install nilfs-utils

Format the lv_home logical volume as NILFS:

  mkfs.nilfs2 /dev/vg_burritofedora/lv_home

Now we need to edit /etc/fstab, but before we can do so, we need to
mount the root partition:

  mkdir root
  mount /dev/mapper/vg_burritofedora-lv_root root/

Now edit /etc/fstab by accessing it through the new root mount:

  vi root/etc/fstab

Edit this line in /etc/fstab to specify that lv_home is actually NILFS
(remember the 'nogc' option to disable the garbage collector):

  /dev/mapper/vg_burritofedora-lv_home /home nilfs2    rw,nogc        0 0

Now remove the LiveCD ISO image and reboot.

Try to log in as 'researcher', and you'll see a bunch of errors since
there's no longer a /home/researcher directory!  Get past all of those
errors, open a terminal, 'su' to become root, and move the backup
researcher/ directory back into /home:

  su
  mv /home-backup/researcher /home/

Now reboot again, and all should be well :)

/home/researcher should now be a NILFS partition with NO garbage
collector.  Run 'mount' to verify.


Finally, we want the user 'researcher' to be able to mount/unmount NILFS
snapshots without needing to type in a password.  To do so, add these
lines to /etc/sudoers by editing it using "sudo visudo":

  researcher      ALL=(ALL)       ALL
  researcher      ALL=NOPASSWD: /bin/mount
  researcher      ALL=NOPASSWD: /bin/umount
  researcher      ALL=NOPASSWD: /sbin/mount.nilfs2
  researcher      ALL=NOPASSWD: /sbin/umount.nilfs2
  researcher      ALL=NOPASSWD: /usr/bin/chcp
  researcher      ALL=NOPASSWD: /usr/bin/mkcp
  researcher      ALL=NOPASSWD: /usr/bin/rmcp

The first line gives user 'researcher' full sudo access.  All subsequent
lines say that 'researcher' can run those commands as 'sudo' WITHOUT
TYPING A PASSWORD!  Note that those commands still must be run as
'sudo', but no password is required :)


5. Install AT-SPI and pyatspi

Update to the latest version of AT-SPI:

  sudo yum install at-spi2-core
  sudo yum install at-spi2-atk

Enable assistive technologies so that pyatspi works.  Select from the
top menu:

  System -> Preferences -> Assistive Technologies
  Check the "Enable assistive technologies" checkbox
  Log out and log back in

Install pyatspi:

  sudo yum install pyatspi

Now test to see whether it works by running the following Python code:

  import pyatspi
  reg = pyatspi.Registry()
  desktop = reg.getDesktop(0)
  for app in desktop:
    print app

If pyatspi works, then you should see a list of opened GUI applications.


6. Install SystemTap

  sudo yum install systemtap systemtap-runtime

Now install kernel debug symbols to get it to cooperate with SystemTap.

Run "uname -r" to find the exact kernel version we're using:
    2.6.35.6-45.fc14.i686

And then use that exact string in:

  sudo yum install kernel-devel-2.6.35.6-45.fc14.i686
  sudo debuginfo-install kernel-2.6.35.6-45.fc14.i686

(the latter is ~1.2 GB, so it might take a while to download)


Add user 'researcher' to groups 'stapdev' and 'stapusr' so that I can
run SystemTap as non-root:

  sudo usermod -a -G stapdev researcher
  sudo usermod -a -G stapusr researcher


Log out and then log back in.

Test to see if SystemTap works by running this command:

  stap -e 'probe syscall.open { log(execname() . ": " . filename) }'

If it's working, then you should see a bunch of open() system calls
being printed to the terminal when you launch applications.


7. Create burrito log directory

Create a /var/log/burrito directory to store all of the log and database
output.  Make sure that the user 'researcher' has write permissions for
that directory, so that I don't have to be root to write into it.

  sudo mkdir /var/log/burrito
  sudo chown researcher /var/log/burrito
  sudo chgrp researcher /var/log/burrito

Note that this directory is *not* under NILFS, so that our log files
don't get versioned.  This is a GOOD thing, since the log files already
have timestamps, so they don't need additional versioning.


8. Install MongoDB and PyMongo

Download a 32-bit MongoDB Linux binary from here:
  http://www.mongodb.org/downloads

[sadly, 32-bit MongoDB is only limited to storing ~2GB of data, so use a
64-bit machine if you need more storage!]


Unzip it in $HOME.  All the binaries are self-contained, so just add the
mongodb bin/ directory to your $PATH, and you're all set!

Create the database directory:
  mkdir /var/log/burrito/MongoDB


Add the following command to the GNOME Startup Applications panel so
that MongoDB always starts when you log in.

Select from the top menu:
  System -> Preferences -> Startup Applications
  Add a new entry for MongoDB with the following command:

    mongod --fork --quiet --dbpath /var/log/burrito/MongoDB --logpath /var/log/burrito/MongoDB/mongodb.log --logappend

[The --quiet option is important, or else the mongodb.log file grows HUGE!]
[See: http://www.mongodb.org/display/DOCS/Starting+and+Stopping+Mongo]

Log out and log back in, then type 'mongo' to connect to a local
database.  If you enter the MongoDB console, then this means that the
mongod daemon is running fine!


Install Python bindings for MongoDB (pymongo)
  http://api.mongodb.org/python/current/


First you need to install the pip package manager for Python:
  sudo yum install python-pip

and also Python headers since pymongo needs to compile some native
extension modules:
  sudo yum install python-devel

Finally install PyMongo using pip:
  sudo pip-python install pymongo

To test if it works, start up Python and run:
  import pymongo
  pymongo.Connection()


9. Install git and check out the burrito git repository

  sudo yum install git-core
  git clone git://github.com/pgbovine/burrito.git

[... to be continued ...]

